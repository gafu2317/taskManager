name: CI Pipeline

# トリガー：push と pull_request時に実行
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # フロントエンドのテスト・ビルド
  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest
    
    steps:
      # リポジトリのコードをチェックアウト
      - name: Checkout code
        uses: actions/checkout@v4
        
      # Node.js環境セットアップ
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      # 依存関係インストール
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
        
      # コードの文法・スタイルチェック
      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint
        
      # TypeScript型チェック
      - name: Type check
        working-directory: ./frontend
        run: npm run type-check
        
      # テスト実行
      - name: Run tests
        working-directory: ./frontend
        run: npm run test
        
      # ビルドテスト
      - name: Build application
        working-directory: ./frontend
        run: npm run build

  # バックエンドのテスト・ビルド
  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    
    steps:
      # リポジトリのコードをチェックアウト
      - name: Checkout code
        uses: actions/checkout@v4
        
      # Go環境セットアップ
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          
      # 依存関係ダウンロード
      - name: Download dependencies
        working-directory: ./backend
        run: go mod download
        
      # コードフォーマットチェック
      - name: Check formatting
        working-directory: ./backend
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "コードがフォーマットされていません"
            gofmt -s -l .
            exit 1
          fi
          
      # 静的解析
      - name: Run vet
        working-directory: ./backend
        run: go vet ./...
        
      # テスト実行
      - name: Run tests
        working-directory: ./backend
        run: go test -v ./...
        
      # ビルドテスト
      - name: Build application
        working-directory: ./backend
        run: go build -v ./...

  # 統合テスト（将来的に）
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
        
      # 今後Docker Composeでの統合テストを追加予定
      - name: Placeholder for integration tests
        run: echo "統合テストは後で実装予定"